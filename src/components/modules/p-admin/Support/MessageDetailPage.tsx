"use client";

import React, { useEffect, useState, useMemo, useCallback } from "react";
import { useParams, useRouter } from "next/navigation";
import { apiRequest } from "@/libs/api";
import "@/styles/p-admin/AdminTextEditor.css"; // Note: This should ideally be renamed to a generic editor style or Quill style
import DatePicker from "react-datepicker";
// import { CKEditor } from "@ckeditor/ckeditor5-react"; // REMOVED
// import ClassicEditor from "@ckeditor/ckeditor5-build-classic"; // REMOVED
// import CustomUploadAdapterPlugin from "@/components/Ui/Modals/p-admin/blog/CustomUploadAdapterPlugin"; // REMOVED
import Image from "next/image";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { loadEncryptedData } from "../../EncryptData/SavedEncryptData";
import LineTitle from "../LineTitle";
import CustomAdminInput from "../CustomAdminInput";
import TypeDropdown from "./TypeDropdown";
import { FaCalendar, FaTrash } from "react-icons/fa";
import AdminToggleSwitch from "@/components/Ui/AdminToggleSwitch/AdminToggleSwitch";
import "react-datepicker/dist/react-datepicker.css";
import dynamic from "next/dynamic"; // NEW

// ðŸ’¡ NEW: Dynamic import for ReactQuill to prevent SSR issues
const ReactQuill = dynamic(() => import("react-quill"), { 
    ssr: false,
    loading: () => <p className="text-white p-4">Loading text editor...</p>,
});
import "react-quill/dist/quill.snow.css"; // Import Quill styles

interface Announcement {
Â  id: string;
Â  title: string;
Â  message_content: string;
Â  type?: string;
Â  image_path?: string;
Â  status?: "draft" | "published";
Â  published_at?: string;
}

export default function MessageDetailPage() {
Â  const params = useParams();
Â  const id = Array.isArray(params?.id) ? params.id[0] : params?.id;
Â  const router = useRouter();
Â  const [editData, setEditData] = useState<Partial<Announcement>>({});
Â  const [editImage, setEditImage] = useState<File | string | null>(null);
Â  const [initialData, setInitialData] = useState<Partial<Announcement>>({});
Â  const [loading, setLoading] = useState(false);
Â  const [status, setStatus] = useState<"draft" | "published">("draft");
Â  const [publishedAt, setPublishedAt] = useState<Date | null>(null);
Â  const [initialPublishedAt, setInitialPublishedAt] = useState<Date | null>(
Â  Â  null
Â  );

Â  const BASE_URL = process.env.NEXT_PUBLIC_API_URL;

Â  // ðŸ’¡ NEW: Define the Quill modules/toolbar configuration inline
Â  const quillModules = useMemo(() => ({
Â  Â  toolbar: [
Â  Â  Â  [{ header: [1, 2, 3, 4, 5, 6, false] }],
Â  Â  Â  ['bold', 'italic', 'underline', 'strike'],
Â  Â  Â  ['blockquote', 'code-block'],
Â  Â  Â  [{ list: 'ordered' }, { list: 'bullet' }],
Â  Â  Â  [{ indent: '-1' }, { indent: '+1' }],
Â  Â  Â  [{ direction: 'rtl' }],
Â  Â  Â  [{ size: ['small', false, 'large', 'huge'] }],
Â  Â  Â  [{ color: [] }, { background: [] }],
Â  Â  Â  [{ font: [] }],
Â  Â  Â  [{ align: [] }],
Â  Â  Â  ['link', 'image', 'video'],
Â  Â  Â  ['clean'],
Â  Â  ],
Â  }), []);

Â  // handleChange helper
Â  const handleChange = (key: keyof Announcement, value: any) => {
Â  Â  setEditData((prev) => ({
Â  Â  Â  ...prev,
Â  Â  Â  [key]: value,
Â  Â  }));
Â  };

Â  // NOTE: CKEditor config is no longer needed
Â  // const editorConfig = { ... }

Â  const fetchMessage = useCallback(async () => {
Â  Â  if (!id) return;
Â  Â  setLoading(true);
Â  Â  const token = loadEncryptedData()?.token;
Â  Â  try {
Â  Â  Â  const res = await apiRequest<{ data: Announcement }>(
Â  Â  Â  Â  `${BASE_URL}/v1/admin/showAnnouncements/${id}`,
Â  Â  Â  Â  "GET",
Â  Â  Â  Â  undefined,
Â  Â  Â  Â  { Authorization: `Bearer ${token}` }
Â  Â  Â  );
Â  Â  Â  if (res.success) {
Â  Â  Â  Â  const data = res.data.data;
Â  Â  Â  Â  setEditData(data);
Â  Â  Â  Â  setInitialData(data);
Â  Â  Â  Â  setEditImage(data.image_path || null);
Â  Â  Â  Â  setStatus(data.status || "draft");
Â  Â  Â  Â  setPublishedAt(data.published_at ? new Date(data.published_at) : null);
Â  Â  Â  Â  setInitialPublishedAt(
Â  Â  Â  Â  Â  data.published_at ? new Date(data.published_at) : null
Â  Â  Â  Â  );
Â  Â  Â  } else {
Â  Â  Â  Â  toast.error(res.message || "Failed to fetch announcement");
Â  Â  Â  }
Â  Â  } catch (err: any) {
Â  Â  Â  toast.error(err?.message || "Failed to fetch announcement");
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, [
Â  Â  id,
Â  Â  setEditData,
Â  Â  setInitialData,
Â  Â  setEditImage,
Â  Â  BASE_URL,
Â  Â  setStatus,
Â  Â  setPublishedAt,
Â  Â  setInitialPublishedAt,
Â  Â  setLoading,
Â  ]);

Â  const handleSubmit = async () => {
Â  Â  if (!id) return toast.error("Invalid ID");
Â  Â  
Â  Â  // Trimming the content before submission is a good practice, especially after switching editors
Â  Â  const contentToSubmit = editData.message_content?.trim() || "";
Â  Â  if (!contentToSubmit && editData.title) {
Â  Â  Â  // Optionally check for minimum content length or throw error if content is mandatory
Â  Â  }


Â  Â  const token = loadEncryptedData()?.token;
Â  Â  const form = new FormData();
Â  Â  form.append("title", editData.title || "");
Â  Â  form.append("message_content", contentToSubmit);
Â  Â  form.append("type", editData.type || "");
Â  Â  form.append("status", status);
Â  Â  if (publishedAt) form.append("published_at", publishedAt.toISOString());
Â  Â  if (editImage instanceof File) form.append("image", editImage);

Â  Â  try {
Â  Â  Â  const res = await apiRequest<any>(
Â  Â  Â  Â  `${BASE_URL}/v1/admin/updateAnnouncements/${id}`,
Â  Â  Â  Â  "POST",
Â  Â  Â  Â  form,
Â  Â  Â  Â  { Authorization: `Bearer ${token}` }
Â  Â  Â  );

Â  Â  Â  if (res.success) {
Â  Â  Â  Â  toast.success("Updated successfully!");
Â  Â  Â  Â  // Update initial data to reflect the latest saved state
Â  Â  Â  Â  setInitialData({
            ...editData,
            message_content: contentToSubmit, // Use the trimmed version
            status: status,
        });
Â  Â  Â  Â  setInitialPublishedAt(publishedAt);
Â  Â  Â  Â  if (!(editImage instanceof File)) setEditImage(editImage);
Â  Â  Â  } else {
Â  Â  Â  Â  toast.error(res.message || "Update failed");
Â  Â  Â  }
Â  Â  } catch (error: any) {
        toast.error(`Request failed: ${error.message}`);
    }
Â  };

Â  const hasChanged = useMemo(() => {
Â  Â  return (
Â  Â  Â  editData.title !== initialData.title ||
Â  Â  Â  editData.message_content !== initialData.message_content ||
Â  Â  Â  editData.type !== initialData.type ||
Â  Â  Â  status !== (initialData.status || "draft") ||
Â  Â  Â  publishedAt?.toISOString() !== initialPublishedAt?.toISOString() ||
Â  Â  Â  (editImage !== initialData.image_path &&
Â  Â  Â  Â  !(editImage === null && !initialData.image_path))
Â  Â  );
Â  }, [
Â  Â  editData,
Â  Â  status,
Â  Â  publishedAt,
Â  Â  initialData,
Â  Â  editImage,
Â  Â  initialPublishedAt,
Â  ]);

Â  useEffect(() => {
Â  Â  fetchMessage();
Â  }, [id, fetchMessage]);

Â  if (loading) return <p className="text-white">Loading...</p>;

Â  return (
Â  Â  <div className="p-4">
Â  Â  Â  <ToastContainer />
Â  Â  Â  <LineTitle onClick={() => {}} title={`Edit Message`} />

Â  Â  Â  {/* Image Upload */}
Â  Â  Â  <div className="mb-12">
Â  Â  Â  Â  <label className="text-sm text-white mb-2 block">
Â  Â  Â  Â  Â  Announcement Image
Â  Â  Â  Â  </label>
Â  Â  Â  Â  <div className="flex items-center justify-center gap-2">
Â  Â  Â  Â  Â  {editImage ? (
Â  Â  Â  Â  Â  Â  <div className="relative w-72 h-60 rounded-xl overflow-hidden border border-gray-600">
Â  Â  Â  Â  Â  Â  Â  {typeof editImage === "string" ? (
Â  Â  Â  Â  Â  Â  Â  Â  <Image
Â  Â  Â  Â  Â  Â  Â  Â  Â  src={`${process.env.NEXT_PUBLIC_API_URL_STORAGE}/${editImage}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  alt="Preview"
Â  Â  Â  Â  Â  Â  Â  Â  Â  fill
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="object-cover w-full h-full"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <Image
Â  Â  Â  Â  Â  Â  Â  Â  Â  width={400}
Â  Â  Â  Â  Â  Â  Â  Â  Â  height={400}
Â  Â  Â  Â  Â  Â  Â  Â  Â  src={URL.createObjectURL(editImage)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  alt="Preview"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-full object-cover"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  className="absolute top-2 right-2 bg-red-500 w-6 h-6 flex items-center justify-center text-white rounded-full p-1 hover:bg-red-600"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setEditImage(null)}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <FaTrash />
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <label className="relative w-72 h-60 flex items-center justify-center cursor-pointer rounded-xl border-2 border-dashed border-gray-500 text-white bg-transparent hover:bg-gray-700 transition">
Â  Â  Â  Â  Â  Â  Â  <span className="text-center pointer-events-none">
Â  Â  Â  Â  Â  Â  Â  Â  Upload Image
Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  Â  Â  Â  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  e.target.files && setEditImage(e.target.files[0])
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  <div className="flex items-center gap-6 flex-wrap mt-6">
Â  Â  Â  Â  {/* Title */}
Â  Â  Â  Â  <CustomAdminInput
Â  Â  Â  Â  Â  title="Title"
Â  Â  Â  Â  Â  value={editData.title || ""}
Â  Â  Â  Â  Â  onChange={(val) => handleChange("title", val)}
Â  Â  Â  Â  />

Â  Â  Â  Â  {/* Published Date */}
Â  Â  Â  Â  <div className="flex flex-col">
Â  Â  Â  Â  Â  <label className="text-white mb-1">Published At</label>
Â  Â  Â  Â  Â  <div className="flex items-center gap-0 mt-2 relative border border-[#383C47] rounded-[.6rem]">
Â  Â  Â  Â  Â  Â  <DatePicker
Â  Â  Â  Â  Â  Â  Â  placeholderText="yyyy-mm-dd:hh:mm:ss"
Â  Â  Â  Â  Â  Â  Â  selected={publishedAt}
Â  Â  Â  Â  Â  Â  Â  onChange={(date: Date | null) => setPublishedAt(date)}
Â  Â  Â  Â  Â  Â  Â  showTimeSelect
Â  Â  Â  Â  Â  Â  Â  dateFormat="yyyy-MM-dd HH:mm"
Â  Â  Â  Â  Â  Â  Â  className="w-full p-2 rounded-md bg-transparent text-white"
Â  Â  Â  Â  Â  Â  Â  calendarClassName="bg-[#1F2937] text-white rounded-lg"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <FaCalendar className="text-[#383C47] right-2 absolute" />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Type */}
Â  Â  Â  Â  <TypeDropdown
Â  Â  Â  Â  Â  value={editData.type || ""}
Â  Â  Â  Â  Â  onChange={(val) => handleChange("type", val)}
Â  Â  Â  Â  />
Â  Â  Â  </div>

Â  Â  Â  {/* Status */}
Â  Â  Â  <div className="flex items-center gap-4 my-12">
Â  Â  Â  Â  <span className="text-white text-sm">Is Published ?</span>
Â  Â  Â  Â  <AdminToggleSwitch
Â  Â  Â  Â  Â  checked={status === "published"}
Â  Â  Â  Â  Â  onChange={(checked: boolean) =>
Â  Â  Â  Â  Â  Â  setStatus(checked ? "published" : "draft")
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  />
Â  Â  Â  </div>

Â  Â  Â  {/* Message Content - REPLACED WITH REACTQUILL */}
Â  Â  Â  <div className="mt-4 w-full">
Â  Â  Â  Â  <label className="block font-medium mb-2 text-white">
Â  Â  Â  Â  Â  Message Content
Â  Â  Â  Â  </label>
Â  Â  Â  Â  <ReactQuill
Â  Â  Â  Â  Â  theme="snow"
Â  Â  Â  Â  Â  value={editData.message_content || ""}
Â  Â  Â  Â  Â  onChange={(content) => handleChange("message_content", content)}
Â  Â  Â  Â  Â  modules={quillModules}
Â  Â  Â  Â  Â  className="react-quill-editor"
Â  Â  Â  Â  />
Â  Â  Â  </div>

Â  Â  Â  {/* Buttons */}
Â  Â  Â  <div className="flex justify-end gap-2 mt-4">
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  className="bg-gray-700 text-white px-4 py-2 rounded"
Â  Â  Â  Â  Â  onClick={() => router.back()}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Back
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  className={`px-4 py-2 rounded ${
Â  Â  Â  Â  Â  Â  hasChanged
Â  Â  Â  Â  Â  Â  Â  ? "bg-blue-500 hover:bg-blue-600 text-white cursor-pointer"
Â  Â  Â  Â  Â  Â  Â  : "bg-gray-500 text-gray-300 cursor-not-allowed"
Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  onClick={handleSubmit}
Â  Â  Â  Â  Â  disabled={!hasChanged}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Save
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}